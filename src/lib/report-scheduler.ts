/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—ñ–≤
 */

import { 
  TelegramSettings, 
  loadTelegramSettings, 
  sendTelegramMessage, 
  formatDailyReport, 
  formatWeeklyReport 
} from './telegram-service';

// –ö–ª—é—á –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–¥–∞—á –≤ localStorage
const TASKS_STORAGE_KEY = 'tasks';

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–¥–∞—á—ñ
interface Task {
  id: string;
  title: string;
  description?: string;
  dueDate: string;
  completed: boolean;
  category?: string;
  priority?: 'low' | 'medium' | 'high';
  createdAt: string;
  updatedAt?: string;
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–∞–¥–∞—á—ñ –∑ localStorage
 */
const loadTasks = (): Task[] => {
  try {
    const tasksJson = localStorage.getItem(TASKS_STORAGE_KEY);
    return tasksJson ? JSON.parse(tasksJson) : [];
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á:', error);
    return [];
  }
};

/**
 * –ë–µ–∑–ø–µ—á–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä—è–¥–æ–∫ –¥–∞—Ç–∏ –≤ –æ–±'—î–∫—Ç Date
 */
const safeParseDate = (dateStr: string): Date | null => {
  try {
    const date = new Date(dateStr);
    return isNaN(date.getTime()) ? null : date;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏:', error);
    return null;
  }
};

/**
 * –§—ñ–ª—å—Ç—Ä—É—î –∑–∞–¥–∞—á—ñ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
 */
const filterTasksByDateRange = (tasks: Task[], startDate: Date, endDate: Date): Task[] => {
  return tasks.filter(task => {
    const taskDate = safeParseDate(task.dueDate);
    if (!taskDate) return false;
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –Ω–∞ 0, —â–æ–± –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç–∏
    const taskDateOnly = new Date(taskDate.getFullYear(), taskDate.getMonth(), taskDate.getDate());
    const startDateOnly = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());
    const endDateOnly = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());
    
    return taskDateOnly >= startDateOnly && taskDateOnly <= endDateOnly;
  });
};

/**
 * –û—Ç—Ä–∏–º—É—î –∑–∞–¥–∞—á—ñ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥–µ–Ω—å
 */
const getTasksForDay = (date: Date): Task[] => {
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–∞—Ç–∏
  return loadTasks();
};

/**
 * –û—Ç—Ä–∏–º—É—î –∑–∞–¥–∞—á—ñ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
 */
const getTasksForWeek = (date: Date): { tasks: Task[], startDate: Date, endDate: Date } => {
  const tasks = loadTasks();
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫)
  const startDate = new Date(date);
  const day = startDate.getDay();
  const diff = startDate.getDate() - day + (day === 0 ? -6 : 1); // –Ø–∫—â–æ –Ω–µ–¥—ñ–ª—è, —Ç–æ -6, —ñ–Ω–∞–∫—à–µ +1
  startDate.setDate(diff);
  startDate.setHours(0, 0, 0, 0);
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫—ñ–Ω–µ—Ü—å —Ç–∏–∂–Ω—è (–Ω–µ–¥—ñ–ª—è)
  const endDate = new Date(startDate);
  endDate.setDate(endDate.getDate() + 6);
  endDate.setHours(23, 59, 59, 999);
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ
  return { 
    tasks: tasks, 
    startDate, 
    endDate 
  };
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
 */
const shouldSendDailyReport = (settings: TelegramSettings): boolean => {
  if (!settings.enabled || !settings.reportSchedule.daily) {
    return false;
  }
  
  const now = new Date();
  const [hours, minutes] = settings.reportSchedule.dailyTime.split(':').map(Number);
  
  return now.getHours() === hours && now.getMinutes() === minutes;
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç
 */
const shouldSendWeeklyReport = (settings: TelegramSettings): boolean => {
  if (!settings.enabled || !settings.reportSchedule.weekly) {
    return false;
  }
  
  const now = new Date();
  const [hours, minutes] = settings.reportSchedule.weeklyTime.split(':').map(Number);
  
  return now.getDay() === settings.reportSchedule.weeklyDay && 
         now.getHours() === hours && 
         now.getMinutes() === minutes;
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
 */
const sendDailyReport = async (): Promise<boolean> => {
  const settings = loadTelegramSettings();
  
  if (!settings.enabled || !settings.reportSchedule.daily) {
    return false;
  }
  
  const today = new Date();
  const tasks = getTasksForDay(today);
  const report = formatDailyReport(tasks, today);
  
  return await sendTelegramMessage(settings.botToken, settings.chatId, report);
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç
 */
const sendWeeklyReport = async (): Promise<boolean> => {
  const settings = loadTelegramSettings();
  
  if (!settings.enabled || !settings.reportSchedule.weekly) {
    return false;
  }
  
  const today = new Date();
  const { tasks, startDate, endDate } = getTasksForWeek(today);
  const report = formatWeeklyReport(tasks, startDate, endDate);
  
  return await sendTelegramMessage(settings.botToken, settings.chatId, report);
};

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–≤—ñ—Ç—ñ–≤
 */
export const initReportScheduler = (): void => {
  console.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–≤—ñ—Ç—ñ–≤...');
  
  // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –±–∞–≥–∞—Ç–æ—Ä–∞–∑–æ–≤—ñ–π –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ
  let lastDailyReportTime = '';
  let lastWeeklyReportTime = '';
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç
  setInterval(() => {
    try {
      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ, 
      // —â–æ–± –≤—Ä–∞—Ö—É–≤–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –∑–º—ñ–Ω–∏
      const settings = loadTelegramSettings();
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
      const now = new Date();
      const currentTimeStr = `${now.getHours()}:${now.getMinutes()}`;
      
      console.log(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–∫–ª–∞–¥—É –∑–≤—ñ—Ç—ñ–≤: ${currentTimeStr}`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
      if (shouldSendDailyReport(settings) && lastDailyReportTime !== currentTimeStr) {
        lastDailyReportTime = currentTimeStr;
        
        console.log(`–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É o ${currentTimeStr}`);
        
        sendDailyReport()
          .then(success => {
            if (success) {
              console.log('–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
            } else {
              console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É');
            }
          })
          .catch(error => {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É:', error);
          });
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç
      if (shouldSendWeeklyReport(settings) && lastWeeklyReportTime !== currentTimeStr) {
        lastWeeklyReportTime = currentTimeStr;
        
        console.log(`–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —â–æ—Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É o ${currentTimeStr}`);
        
        sendWeeklyReport()
          .then(success => {
            if (success) {
              console.log('–©–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
            } else {
              console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É');
            }
          })
          .catch(error => {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É:', error);
          });
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É –∑–≤—ñ—Ç—ñ–≤:', error);
    }
  }, 15000); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥
  
  console.log('–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–≤—ñ—Ç—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç
 */
export const sendTestReport = async (): Promise<boolean> => {
  const settings = loadTelegramSettings();
  
  if (!settings.enabled) {
    return false;
  }
  
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ
    const today = new Date();
    const reportDate = new Date(today);
    const tasks = getTasksForDay(today);
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
    const report = formatDailyReport(tasks, today);
    
    // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É
    const testReport = `<b>üß™ –¢–ï–°–¢–û–í–ò–ô –ó–í–Ü–¢</b>\n<b>‚è∞ –ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:</b> ${reportDate.toLocaleTimeString('uk-UA')}\n\n${report}`;
    
    return await sendTelegramMessage(settings.botToken, settings.chatId, testReport);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É:', error);
    return false;
  }
}; 